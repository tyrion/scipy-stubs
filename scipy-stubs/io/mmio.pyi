# Stubs for scipy.io.mmio (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def mminfo(source: Any): ...
def mmread(source: Any): ...
def mmwrite(target: Any, a: Any, comment: str = ..., field: Optional[Any] = ..., precision: Optional[Any] = ..., symmetry: Optional[Any] = ...) -> None: ...

class MMFile:
    __slots__: Any = ...
    @property
    def rows(self): ...
    @property
    def cols(self): ...
    @property
    def entries(self): ...
    @property
    def format(self): ...
    @property
    def field(self): ...
    @property
    def symmetry(self): ...
    @property
    def has_symmetry(self): ...
    FORMAT_COORDINATE: str = ...
    FORMAT_ARRAY: str = ...
    FORMAT_VALUES: Any = ...
    @classmethod
    def _validate_format(self, format: Any) -> None: ...
    FIELD_INTEGER: str = ...
    FIELD_UNSIGNED: str = ...
    FIELD_REAL: str = ...
    FIELD_COMPLEX: str = ...
    FIELD_PATTERN: str = ...
    FIELD_VALUES: Any = ...
    @classmethod
    def _validate_field(self, field: Any) -> None: ...
    SYMMETRY_GENERAL: str = ...
    SYMMETRY_SYMMETRIC: str = ...
    SYMMETRY_SKEW_SYMMETRIC: str = ...
    SYMMETRY_HERMITIAN: str = ...
    SYMMETRY_VALUES: Any = ...
    @classmethod
    def _validate_symmetry(self, symmetry: Any) -> None: ...
    DTYPES_BY_FIELD: Any = ...
    @staticmethod
    def reader() -> None: ...
    @staticmethod
    def writer() -> None: ...
    @classmethod
    def info(self, source: Any): ...
    @staticmethod
    def _open(filespec: Any, mode: str = ...): ...
    @staticmethod
    def _get_symmetry(a: Any): ...
    @staticmethod
    def _field_template(field: Any, precision: Any): ...
    def __init__(self, **kwargs: Any) -> None: ...
    def read(self, source: Any): ...
    def write(self, target: Any, a: Any, comment: str = ..., field: Optional[Any] = ..., precision: Optional[Any] = ..., symmetry: Optional[Any] = ...) -> None: ...
    def _init_attrs(self, **kwargs: Any) -> None: ...
    def _parse_header(self, stream: Any) -> None: ...
    def _parse_body(self, stream: Any): ...
    def _write(self, stream: Any, a: Any, comment: str = ..., field: Optional[Any] = ..., precision: Optional[Any] = ..., symmetry: Optional[Any] = ...) -> None: ...
