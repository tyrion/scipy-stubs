# Stubs for scipy.io.netcdf (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class netcdf_file:
    fp: Any = ...
    filename: str = ...
    use_mmap: Any = ...
    mode: Any = ...
    version_byte: Any = ...
    maskandscale: Any = ...
    dimensions: Any = ...
    variables: Any = ...
    _dims: Any = ...
    _recs: int = ...
    _recsize: int = ...
    _mm: Any = ...
    _mm_buf: Any = ...
    _attributes: Any = ...
    def __init__(self, filename: Any, mode: str = ..., mmap: Optional[Any] = ..., version: int = ..., maskandscale: bool = ...) -> None: ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def close(self) -> None: ...
    __del__: Any = ...
    def __enter__(self): ...
    def __exit__(self, type: Any, value: Any, traceback: Any) -> None: ...
    def createDimension(self, name: Any, length: Any) -> None: ...
    def createVariable(self, name: Any, type: Any, dimensions: Any): ...
    def flush(self) -> None: ...
    sync: Any = ...
    def _write(self) -> None: ...
    def _write_numrecs(self) -> None: ...
    def _write_dim_array(self) -> None: ...
    def _write_gatt_array(self) -> None: ...
    def _write_att_array(self, attributes: Any) -> None: ...
    def _write_var_array(self): ...
    def _write_var_metadata(self, name: Any) -> None: ...
    def _write_var_data(self, name: Any) -> None: ...
    def _write_var_padding(self, var: Any, size: Any) -> None: ...
    def _write_att_values(self, values: Any) -> None: ...
    def _read(self) -> None: ...
    def _read_numrecs(self) -> None: ...
    def _read_dim_array(self) -> None: ...
    def _read_gatt_array(self) -> None: ...
    def _read_att_array(self): ...
    def _read_var_array(self) -> None: ...
    def _read_var(self): ...
    def _read_att_values(self): ...
    def _pack_begin(self, begin: Any) -> None: ...
    def _pack_int(self, value: Any) -> None: ...
    _pack_int32: Any = ...
    def _unpack_int(self): ...
    _unpack_int32: Any = ...
    def _pack_int64(self, value: Any) -> None: ...
    def _unpack_int64(self): ...
    def _pack_string(self, s: Any) -> None: ...
    def _unpack_string(self): ...

class netcdf_variable:
    data: Any = ...
    _typecode: Any = ...
    _size: Any = ...
    _shape: Any = ...
    dimensions: Any = ...
    maskandscale: Any = ...
    _attributes: Any = ...
    def __init__(self, data: Any, typecode: Any, size: Any, shape: Any, dimensions: Any, attributes: Optional[Any] = ..., maskandscale: bool = ...) -> None: ...
    def __setattr__(self, attr: Any, value: Any) -> None: ...
    def isrec(self): ...
    isrec: Any = ...
    def shape(self): ...
    shape: Any = ...
    def getValue(self): ...
    def assignValue(self, value: Any) -> None: ...
    def typecode(self): ...
    def itemsize(self): ...
    def __getitem__(self, index: Any): ...
    def __setitem__(self, index: Any, data: Any) -> None: ...
    def _default_encoded_fill_value(self): ...
    def _get_encoded_fill_value(self): ...
    def _get_missing_value(self): ...
    @staticmethod
    def _apply_missing_value(data: Any, missing_value: Any): ...
NetCDFFile = netcdf_file
NetCDFVariable = netcdf_variable
