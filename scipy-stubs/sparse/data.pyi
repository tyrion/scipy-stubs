# Stubs for scipy.sparse.data (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import spmatrix
from .sputils import isscalarlike
from typing import Any, Optional

__all__: Any

class _data_matrix(spmatrix):
    def __init__(self) -> None: ...
    def _get_dtype(self): ...
    def _set_dtype(self, newtype: Any) -> None: ...
    dtype: Any = ...
    def _deduped_data(self): ...
    def __abs__(self): ...
    def _real(self): ...
    def _imag(self): ...
    def __neg__(self): ...
    def __imul__(self, other: Any): ...
    def __itruediv__(self, other: Any): ...
    def astype(self, dtype: Any, casting: str = ..., copy: bool = ...): ...
    def conj(self, copy: bool = ...): ...
    def copy(self): ...
    def count_nonzero(self): ...
    def power(self, n: Any, dtype: Optional[Any] = ...): ...
    def _mul_scalar(self, other: Any): ...

name: Any

def _create_method(op: Any): ...
def _find_missing_index(ind: Any, n: Any): ...

class _minmax_mixin:
    def _min_or_max_axis(self, axis: Any, min_or_max: Any): ...
    def _min_or_max(self, axis: Any, out: Any, min_or_max: Any): ...
    def _arg_min_or_max_axis(self, axis: Any, op: Any, compare: Any): ...
    def _arg_min_or_max(self, axis: Any, out: Any, op: Any, compare: Any): ...
    def max(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def min(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def argmax(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
    def argmin(self, axis: Optional[Any] = ..., out: Optional[Any] = ...): ...
