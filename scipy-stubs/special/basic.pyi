# Stubs for scipy.special.basic (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._ufuncs import gamma as gamma, hankel1 as hankel1, hankel2 as hankel2, hyp0f1 as hyp0f1, iv as iv, jv as jv, kv as kv, mathieu_a as mathieu_a, mathieu_b as mathieu_b, ndtri as ndtri, psi as psi, yv as yv
from numpy import sinc as sinc
from typing import Any, Optional

def diric(x: Any, n: Any): ...
def jnjnp_zeros(nt: Any): ...
def jnyn_zeros(n: Any, nt: Any): ...
def jn_zeros(n: Any, nt: Any): ...
def jnp_zeros(n: Any, nt: Any): ...
def yn_zeros(n: Any, nt: Any): ...
def ynp_zeros(n: Any, nt: Any): ...
def y0_zeros(nt: Any, complex: bool = ...): ...
def y1_zeros(nt: Any, complex: bool = ...): ...
def y1p_zeros(nt: Any, complex: bool = ...): ...

bessel_diff_formula: Any

def jvp(v: Any, z: Any, n: int = ...): ...
def yvp(v: Any, z: Any, n: int = ...): ...
def kvp(v: Any, z: Any, n: int = ...): ...
def ivp(v: Any, z: Any, n: int = ...): ...
def h1vp(v: Any, z: Any, n: int = ...): ...
def h2vp(v: Any, z: Any, n: int = ...): ...
def riccati_jn(n: Any, x: Any): ...
def riccati_yn(n: Any, x: Any): ...
def erfinv(y: Any): ...
def erfcinv(y: Any): ...
def erf_zeros(nt: Any): ...
def fresnelc_zeros(nt: Any): ...
def fresnels_zeros(nt: Any): ...
def fresnel_zeros(nt: Any): ...
def assoc_laguerre(x: Any, n: Any, k: float = ...): ...
digamma = psi

def polygamma(n: Any, x: Any): ...
def mathieu_even_coef(m: Any, q: Any): ...
def mathieu_odd_coef(m: Any, q: Any): ...
def lpmn(m: Any, n: Any, z: Any): ...
def clpmn(m: Any, n: Any, z: Any, type: int = ...): ...
def lqmn(m: Any, n: Any, z: Any): ...
def bernoulli(n: Any): ...
def euler(n: Any): ...
def lpn(n: Any, z: Any): ...
def lqn(n: Any, z: Any): ...
def ai_zeros(nt: Any): ...
def bi_zeros(nt: Any): ...
def lmbda(v: Any, x: Any): ...
def pbdv_seq(v: Any, x: Any): ...
def pbvv_seq(v: Any, x: Any): ...
def pbdn_seq(n: Any, z: Any): ...
def ber_zeros(nt: Any): ...
def bei_zeros(nt: Any): ...
def ker_zeros(nt: Any): ...
def kei_zeros(nt: Any): ...
def berp_zeros(nt: Any): ...
def beip_zeros(nt: Any): ...
def kerp_zeros(nt: Any): ...
def keip_zeros(nt: Any): ...
def kelvin_zeros(nt: Any): ...
def pro_cv_seq(m: Any, n: Any, c: Any): ...
def obl_cv_seq(m: Any, n: Any, c: Any): ...
def ellipk(m: Any): ...
def comb(N: Any, k: Any, exact: bool = ..., repetition: bool = ...): ...
def perm(N: Any, k: Any, exact: bool = ...): ...
def factorial(n: Any, exact: bool = ...): ...
def factorial2(n: Any, exact: bool = ...): ...
def factorialk(n: Any, k: Any, exact: bool = ...): ...
def zeta(x: Any, q: Optional[Any] = ..., out: Optional[Any] = ...): ...
