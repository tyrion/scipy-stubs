# Stubs for scipy.special._testutils (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class MissingModule:
    name: Any = ...
    def __init__(self, name: Any) -> None: ...

def with_special_errors(func: Any): ...
def assert_func_equal(func: Any, results: Any, points: Any, rtol: Optional[Any] = ..., atol: Optional[Any] = ..., param_filter: Optional[Any] = ..., knownfailure: Optional[Any] = ..., vectorized: bool = ..., dtype: Optional[Any] = ..., nan_ok: bool = ..., ignore_inf_sign: bool = ..., distinguish_nan_and_inf: bool = ...) -> None: ...

class FuncData:
    func: Any = ...
    data: Any = ...
    dataname: Any = ...
    param_columns: Any = ...
    result_columns: Any = ...
    result_func: Any = ...
    rtol: Any = ...
    atol: Any = ...
    param_filter: Any = ...
    knownfailure: Any = ...
    nan_ok: Any = ...
    vectorized: Any = ...
    ignore_inf_sign: Any = ...
    distinguish_nan_and_inf: Any = ...
    def __init__(self, func: Any, data: Any, param_columns: Any, result_columns: Optional[Any] = ..., result_func: Optional[Any] = ..., rtol: Optional[Any] = ..., atol: Optional[Any] = ..., param_filter: Optional[Any] = ..., knownfailure: Optional[Any] = ..., dataname: Optional[Any] = ..., nan_ok: bool = ..., vectorized: bool = ..., ignore_inf_sign: bool = ..., distinguish_nan_and_inf: bool = ...) -> None: ...
    def get_tolerances(self, dtype: Any): ...
    def check(self, data: Optional[Any] = ..., dtype: Optional[Any] = ...): ...
    def __repr__(self): ...
