# Stubs for scipy.cluster.hierarchy (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import scipy.spatial.distance as distance
from typing import Any, Optional

class ClusterWarning(UserWarning): ...

def single(y: Any): ...
def complete(y: Any): ...
def average(y: Any): ...
def weighted(y: Any): ...
def centroid(y: Any): ...
def median(y: Any): ...
def ward(y: Any): ...
def linkage(y: Any, method: str = ..., metric: str = ..., optimal_ordering: bool = ...): ...

class ClusterNode:
    id: Any = ...
    left: Any = ...
    right: Any = ...
    dist: Any = ...
    count: Any = ...
    def __init__(self, id: Any, left: Optional[Any] = ..., right: Optional[Any] = ..., dist: int = ..., count: int = ...) -> None: ...
    def __lt__(self, node: Any): ...
    def __gt__(self, node: Any): ...
    def __eq__(self, node: Any): ...
    def get_id(self): ...
    def get_count(self): ...
    def get_left(self): ...
    def get_right(self): ...
    def is_leaf(self): ...
    def pre_order(self, func: Any = ...): ...

def cut_tree(Z: Any, n_clusters: Optional[Any] = ..., height: Optional[Any] = ...): ...
def to_tree(Z: Any, rd: bool = ...): ...
def optimal_leaf_ordering(Z: Any, y: Any, metric: str = ...): ...
def cophenet(Z: Any, Y: Optional[Any] = ...): ...
def inconsistent(Z: Any, d: int = ...): ...
def from_mlab_linkage(Z: Any): ...
def to_mlab_linkage(Z: Any): ...
def is_monotonic(Z: Any): ...
def is_valid_im(R: Any, warning: bool = ..., throw: bool = ..., name: Optional[Any] = ...): ...
def is_valid_linkage(Z: Any, warning: bool = ..., throw: bool = ..., name: Optional[Any] = ...): ...
def num_obs_linkage(Z: Any): ...
def correspond(Z: Any, Y: Any): ...
def fcluster(Z: Any, t: Any, criterion: str = ..., depth: int = ..., R: Optional[Any] = ..., monocrit: Optional[Any] = ...): ...
def fclusterdata(X: Any, t: Any, criterion: str = ..., metric: str = ..., depth: int = ..., method: str = ..., R: Optional[Any] = ...): ...
def leaves_list(Z: Any): ...
def set_link_color_palette(palette: Any) -> None: ...
def dendrogram(Z: Any, p: int = ..., truncate_mode: Optional[Any] = ..., color_threshold: Optional[Any] = ..., get_leaves: bool = ..., orientation: str = ..., labels: Optional[Any] = ..., count_sort: bool = ..., distance_sort: bool = ..., show_leaf_counts: bool = ..., no_plot: bool = ..., no_labels: bool = ..., leaf_font_size: Optional[Any] = ..., leaf_rotation: Optional[Any] = ..., leaf_label_func: Optional[Any] = ..., show_contracted: bool = ..., link_color_func: Optional[Any] = ..., ax: Optional[Any] = ..., above_threshold_color: str = ...): ...
def is_isomorphic(T1: Any, T2: Any): ...
def maxdists(Z: Any): ...
def maxinconsts(Z: Any, R: Any): ...
def maxRstat(Z: Any, R: Any, i: Any): ...
def leaders(Z: Any, T: Any): ...
