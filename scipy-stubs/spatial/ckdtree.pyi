# Stubs for scipy.spatial.ckdtree (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

cpu_count: Any

def new_object(*args, **kwargs) -> Any: ...

class cKDTree:
    boxsize: Any = ...
    data: Any = ...
    indices: Any = ...
    leafsize: Any = ...
    m: Any = ...
    maxes: Any = ...
    mins: Any = ...
    n: Any = ...
    size: Any = ...
    tree: Any = ...
    __pyx_vtable__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _build_weights(self, weights) -> Any: ...
    def count_neighbors(self, other, r, p=2., weights=None, cumulative=True) -> Any: ...
    def query(self, x, k=1, eps=0, p=2, distance_upper_bound=np.inf, n_jobs=1) -> Any: ...
    def query_ball_point(self, x, r, p=2., eps=0) -> Any: ...
    def query_ball_tree(self, other, r, p=2., eps=0) -> Any: ...
    def query_pairs(self, r, p=2., eps=0) -> Any: ...
    def sparse_distance_matrix(self, other, max_distance, p=2.) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class cKDTreeNode:
    children: Any = ...
    data_points: Any = ...
    greater: Any = ...
    indices: Any = ...
    lesser: Any = ...
    level: Any = ...
    split: Any = ...
    split_dim: Any = ...
    __pyx_vtable__: Any = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class coo_entries:
    __array_interface__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def coo_matrix(self, *args, **kwargs) -> Any: ...
    def dict(self, *args, **kwargs) -> Any: ...
    def dok_matrix(self, *args, **kwargs) -> Any: ...
    def ndarray(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ordered_pairs:
    __array_interface__: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def ndarray(self, *args, **kwargs) -> Any: ...
    def set(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...
