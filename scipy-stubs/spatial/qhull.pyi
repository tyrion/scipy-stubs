# Stubs for scipy.spatial.qhull (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

asbytes: Any

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def _copy_docstr(*args, **kwargs) -> Any: ...
def _get_barycentric_transforms(*args, **kwargs) -> Any: ...
def tsearch(tri, xi) -> Any: ...

class ConvexHull(_QhullUser):
    def __init__(self, *args, **kwargs) -> None: ...
    def _update(self, *args, **kwargs) -> Any: ...
    def add_points(self, points, restart=False) -> Any: ...
    @property
    def points(self) -> Any: ...
    @property
    def vertices(self) -> Any: ...

class Delaunay(_QhullUser):
    def __init__(self, *args, **kwargs) -> None: ...
    def _update(self, *args, **kwargs) -> Any: ...
    def add_points(self, points, restart=False) -> Any: ...
    def find_simplex(self, xi, bruteforce=False, tol=None) -> Any: ...
    def lift_points(self, x) -> Any: ...
    def plane_distance(self, xi) -> Any: ...
    @property
    def convex_hull(self) -> Any: ...
    @property
    def points(self) -> Any: ...
    @property
    def transform(self) -> Any: ...
    @property
    def vertex_neighbor_vertices(self) -> Any: ...
    @property
    def vertex_to_simplex(self) -> Any: ...

class HalfspaceIntersection(_QhullUser):
    def __init__(self, *args, **kwargs) -> None: ...
    def _update(self, *args, **kwargs) -> Any: ...
    def add_halfspaces(self, halfspaces, restart=False) -> Any: ...
    @property
    def dual_vertices(self) -> Any: ...
    @property
    def halfspaces(self) -> Any: ...

class QhullError(RuntimeError): ...

class Voronoi(_QhullUser):
    def __init__(self, *args, **kwargs) -> None: ...
    def _update(self, *args, **kwargs) -> Any: ...
    def add_points(self, points, restart=False) -> Any: ...
    @property
    def points(self) -> Any: ...
    @property
    def ridge_dict(self) -> Any: ...

class _Qhull:
    furthest_site: Any = ...
    mode_option: Any = ...
    ndim: Any = ...
    options: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def add_points(self, *args, **kwargs) -> Any: ...
    def check_active(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def get_extremes_2d(self, *args, **kwargs) -> Any: ...
    def get_hull_facets(self, *args, **kwargs) -> Any: ...
    def get_hull_points(self, *args, **kwargs) -> Any: ...
    def get_paraboloid_shift_scale(self, *args, **kwargs) -> Any: ...
    def get_points(self, *args, **kwargs) -> Any: ...
    def get_simplex_facet_array(self, *args, **kwargs) -> Any: ...
    def get_voronoi_diagram(self, *args, **kwargs) -> Any: ...
    def triangulate(self, *args, **kwargs) -> Any: ...
    def volume_area(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _QhullUser:
    _qhull: Any = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _add_points(self, *args, **kwargs) -> Any: ...
    def _update(self, *args, **kwargs) -> Any: ...
    def close(self) -> Any: ...
    def __del__(self, *args, **kwargs) -> Any: ...
