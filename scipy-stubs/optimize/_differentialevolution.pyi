# Stubs for scipy.optimize._differentialevolution (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def differential_evolution(func: Any, bounds: Any, args: Any = ..., strategy: str = ..., maxiter: int = ..., popsize: int = ..., tol: float = ..., mutation: Any = ..., recombination: float = ..., seed: Optional[Any] = ..., callback: Optional[Any] = ..., disp: bool = ..., polish: bool = ..., init: str = ..., atol: int = ...): ...

class DifferentialEvolutionSolver:
    _binomial: Any = ...
    _exponential: Any = ...
    __init_error_msg: str = ...
    mutation_func: Any = ...
    strategy: Any = ...
    callback: Any = ...
    polish: Any = ...
    scale: Any = ...
    dither: Any = ...
    cross_over_probability: Any = ...
    func: Any = ...
    args: Any = ...
    limits: Any = ...
    maxiter: Any = ...
    maxfun: Any = ...
    __scale_arg1: Any = ...
    __scale_arg2: Any = ...
    parameter_count: Any = ...
    random_number_generator: Any = ...
    num_population_members: Any = ...
    population_shape: Any = ...
    _nfev: int = ...
    disp: Any = ...
    def __init__(self, func: Any, bounds: Any, args: Any = ..., strategy: str = ..., maxiter: int = ..., popsize: int = ..., tol: float = ..., mutation: Any = ..., recombination: float = ..., seed: Optional[Any] = ..., maxfun: Any = ..., callback: Optional[Any] = ..., disp: bool = ..., polish: bool = ..., init: str = ..., atol: int = ...) -> None: ...
    population: Any = ...
    population_energies: Any = ...
    def init_population_lhs(self) -> None: ...
    def init_population_random(self) -> None: ...
    def init_population_array(self, init: Any) -> None: ...
    @property
    def x(self): ...
    @property
    def convergence(self): ...
    def solve(self): ...
    def _calculate_population_energies(self) -> None: ...
    def __iter__(self): ...
    def __next__(self): ...
    def next(self): ...
    def _scale_parameters(self, trial: Any): ...
    def _unscale_parameters(self, parameters: Any): ...
    def _ensure_constraint(self, trial: Any) -> None: ...
    def _mutate(self, candidate: Any): ...
    def _best1(self, samples: Any): ...
    def _rand1(self, samples: Any): ...
    def _randtobest1(self, samples: Any): ...
    def _currenttobest1(self, candidate: Any, samples: Any): ...
    def _best2(self, samples: Any): ...
    def _rand2(self, samples: Any): ...
    def _select_samples(self, candidate: Any, number_samples: Any): ...
