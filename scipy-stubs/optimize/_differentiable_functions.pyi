# Stubs for scipy.optimize._differentiable_functions (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._hessian_update_strategy import HessianUpdateStrategy
from ._numdiff import approx_derivative, group_columns
from typing import Any

FD_METHODS: Any

class ScalarFunction:
    x: Any = ...
    n: Any = ...
    nfev: int = ...
    ngev: int = ...
    nhev: int = ...
    f_updated: bool = ...
    g_updated: bool = ...
    H_updated: bool = ...
    f: Any = ...
    _update_fun_impl: Any = ...
    g: Any = ...
    _update_grad_impl: Any = ...
    H: Any = ...
    x_prev: Any = ...
    g_prev: Any = ...
    _update_hess_impl: Any = ...
    _update_x_impl: Any = ...
    def __init__(self, fun: Any, x0: Any, args: Any, grad: Any, hess: Any, finite_diff_rel_step: Any, finite_diff_bounds: Any) -> None: ...
    def _update_fun(self) -> None: ...
    def _update_grad(self) -> None: ...
    def _update_hess(self) -> None: ...
    def fun(self, x: Any): ...
    def grad(self, x: Any): ...
    def hess(self, x: Any): ...

class VectorFunction:
    x: Any = ...
    n: Any = ...
    nfev: int = ...
    njev: int = ...
    nhev: int = ...
    f_updated: bool = ...
    J_updated: bool = ...
    H_updated: bool = ...
    x_diff: Any = ...
    f: Any = ...
    _update_fun_impl: Any = ...
    v: Any = ...
    m: Any = ...
    J: Any = ...
    sparse_jacobian: bool = ...
    _update_jac_impl: Any = ...
    H: Any = ...
    x_prev: Any = ...
    J_prev: Any = ...
    _update_hess_impl: Any = ...
    _update_x_impl: Any = ...
    def __init__(self, fun: Any, x0: Any, jac: Any, hess: Any, finite_diff_rel_step: Any, finite_diff_jac_sparsity: Any, finite_diff_bounds: Any, sparse_jacobian: Any) -> None: ...
    def _update_v(self, v: Any) -> None: ...
    def _update_x(self, x: Any) -> None: ...
    def _update_fun(self) -> None: ...
    def _update_jac(self) -> None: ...
    def _update_hess(self) -> None: ...
    def fun(self, x: Any): ...
    def jac(self, x: Any): ...
    def hess(self, x: Any, v: Any): ...

class LinearVectorFunction:
    J: Any = ...
    sparse_jacobian: bool = ...
    x: Any = ...
    f: Any = ...
    f_updated: bool = ...
    v: Any = ...
    H: Any = ...
    def __init__(self, A: Any, x0: Any, sparse_jacobian: Any) -> None: ...
    def _update_x(self, x: Any) -> None: ...
    def fun(self, x: Any): ...
    def jac(self, x: Any): ...
    def hess(self, x: Any, v: Any): ...

class IdentityVectorFunction(LinearVectorFunction):
    def __init__(self, x0: Any, sparse_jacobian: Any) -> None: ...
