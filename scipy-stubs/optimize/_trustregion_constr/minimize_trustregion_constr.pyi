# Stubs for scipy.optimize._trustregion_constr.minimize_trustregion_constr (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .._constraints import LinearConstraint, NonlinearConstraint, PreparedConstraint, strict_bounds
from .._differentiable_functions import ScalarFunction, VectorFunction
from ..optimize import OptimizeResult
from .canonical_constraint import CanonicalConstraint, initial_constraints_as_canonical
from .equality_constrained_sqp import equality_constrained_sqp
from .report import BasicReport, IPReport, SQPReport
from .tr_interior_point import tr_interior_point
from typing import Any, Optional

TERMINATION_MESSAGES: Any

class HessianLinearOperator:
    hessp: Any = ...
    n: Any = ...
    def __init__(self, hessp: Any, n: Any) -> None: ...
    def __call__(self, x: Any, *args: Any): ...

class LagrangianHessian:
    n: Any = ...
    objective_hess: Any = ...
    constraints_hess: Any = ...
    def __init__(self, n: Any, objective_hess: Any, constraints_hess: Any) -> None: ...
    def __call__(self, x: Any, v_eq: Any = ..., v_ineq: Any = ...): ...

def update_state_sqp(state: Any, x: Any, last_iteration_failed: Any, objective: Any, prepared_constraints: Any, start_time: Any, tr_radius: Any, constr_penalty: Any, cg_info: Any): ...
def update_state_ip(state: Any, x: Any, last_iteration_failed: Any, objective: Any, prepared_constraints: Any, start_time: Any, tr_radius: Any, constr_penalty: Any, cg_info: Any, barrier_parameter: Any, barrier_tolerance: Any): ...
def _minimize_trustregion_constr(fun: Any, x0: Any, args: Any, grad: Any, hess: Any, hessp: Any, bounds: Any, constraints: Any, xtol: float = ..., gtol: float = ..., barrier_tol: float = ..., sparse_jacobian: Optional[Any] = ..., callback: Optional[Any] = ..., maxiter: int = ..., verbose: int = ..., finite_diff_rel_step: Optional[Any] = ..., initial_constr_penalty: float = ..., initial_tr_radius: float = ..., initial_barrier_parameter: float = ..., initial_barrier_tolerance: float = ..., factorization_method: Optional[Any] = ..., disp: bool = ...): ...
