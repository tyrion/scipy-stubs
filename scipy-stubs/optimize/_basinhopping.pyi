# Stubs for scipy.optimize._basinhopping (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class Storage:
    def __init__(self, minres: Any) -> None: ...
    minres: Any = ...
    def _add(self, minres: Any) -> None: ...
    def update(self, minres: Any): ...
    def get_lowest(self): ...

class BasinHoppingRunner:
    x: Any = ...
    minimizer: Any = ...
    step_taking: Any = ...
    accept_tests: Any = ...
    disp: Any = ...
    nstep: int = ...
    res: Any = ...
    energy: Any = ...
    storage: Any = ...
    def __init__(self, x0: Any, minimizer: Any, step_taking: Any, accept_tests: Any, disp: bool = ...) -> None: ...
    def _monte_carlo_step(self): ...
    xtrial: Any = ...
    energy_trial: Any = ...
    accept: Any = ...
    def one_cycle(self): ...
    def print_report(self, energy_trial: Any, accept: Any) -> None: ...

class AdaptiveStepsize:
    takestep: Any = ...
    target_accept_rate: Any = ...
    interval: Any = ...
    factor: Any = ...
    verbose: Any = ...
    nstep: int = ...
    nstep_tot: int = ...
    naccept: int = ...
    def __init__(self, takestep: Any, accept_rate: float = ..., interval: int = ..., factor: float = ..., verbose: bool = ...) -> None: ...
    def __call__(self, x: Any): ...
    def _adjust_step_size(self) -> None: ...
    def take_step(self, x: Any): ...
    def report(self, accept: Any, **kwargs: Any) -> None: ...

class RandomDisplacement:
    stepsize: Any = ...
    random_state: Any = ...
    def __init__(self, stepsize: float = ..., random_state: Optional[Any] = ...) -> None: ...
    def __call__(self, x: Any): ...

class MinimizerWrapper:
    minimizer: Any = ...
    func: Any = ...
    kwargs: Any = ...
    def __init__(self, minimizer: Any, func: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def __call__(self, x0: Any): ...

class Metropolis:
    beta: Any = ...
    random_state: Any = ...
    def __init__(self, T: Any, random_state: Optional[Any] = ...) -> None: ...
    def accept_reject(self, energy_new: Any, energy_old: Any): ...
    def __call__(self, **kwargs: Any): ...

def basinhopping(func: Any, x0: Any, niter: int = ..., T: float = ..., stepsize: float = ..., minimizer_kwargs: Optional[Any] = ..., take_step: Optional[Any] = ..., accept_test: Optional[Any] = ..., callback: Optional[Any] = ..., interval: int = ..., disp: bool = ..., niter_success: Optional[Any] = ..., seed: Optional[Any] = ...): ...
