# Stubs for scipy.optimize._lsq.common (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

EPS: Any

def intersect_trust_region(x: Any, s: Any, Delta: Any): ...
def solve_lsq_trust_region(n: Any, m: Any, uf: Any, s: Any, V: Any, Delta: Any, initial_alpha: Optional[Any] = ..., rtol: float = ..., max_iter: int = ...): ...
def solve_trust_region_2d(B: Any, g: Any, Delta: Any): ...
def update_tr_radius(Delta: Any, actual_reduction: Any, predicted_reduction: Any, step_norm: Any, bound_hit: Any): ...
def build_quadratic_1d(J: Any, g: Any, s: Any, diag: Optional[Any] = ..., s0: Optional[Any] = ...): ...
def minimize_quadratic_1d(a: Any, b: Any, lb: Any, ub: Any, c: int = ...): ...
def evaluate_quadratic(J: Any, g: Any, s: Any, diag: Optional[Any] = ...): ...
def in_bounds(x: Any, lb: Any, ub: Any): ...
def step_size_to_bound(x: Any, s: Any, lb: Any, ub: Any): ...
def find_active_constraints(x: Any, lb: Any, ub: Any, rtol: float = ...): ...
def make_strictly_feasible(x: Any, lb: Any, ub: Any, rstep: float = ...): ...
def CL_scaling_vector(x: Any, g: Any, lb: Any, ub: Any): ...
def reflective_transformation(y: Any, lb: Any, ub: Any): ...
def print_header_nonlinear() -> None: ...
def print_iteration_nonlinear(iteration: Any, nfev: Any, cost: Any, cost_reduction: Any, step_norm: Any, optimality: Any) -> None: ...
def print_header_linear() -> None: ...
def print_iteration_linear(iteration: Any, cost: Any, cost_reduction: Any, step_norm: Any, optimality: Any) -> None: ...
def compute_grad(J: Any, f: Any): ...
def compute_jac_scale(J: Any, scale_inv_old: Optional[Any] = ...): ...
def left_multiplied_operator(J: Any, d: Any): ...
def right_multiplied_operator(J: Any, d: Any): ...
def regularized_lsq_operator(J: Any, diag: Any): ...
def right_multiply(J: Any, d: Any, copy: bool = ...): ...
def left_multiply(J: Any, d: Any, copy: bool = ...): ...
def check_termination(dF: Any, F: Any, dx_norm: Any, x_norm: Any, ratio: Any, ftol: Any, xtol: Any): ...
def scale_for_robust_loss_function(J: Any, f: Any, rho: Any): ...
