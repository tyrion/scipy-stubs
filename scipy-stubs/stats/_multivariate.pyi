# Stubs for scipy.stats._multivariate (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class _PSD:
    rank: Any = ...
    U: Any = ...
    log_pdet: Any = ...
    _pinv: Any = ...
    def __init__(self, M: Any, cond: Optional[Any] = ..., rcond: Optional[Any] = ..., lower: bool = ..., check_finite: bool = ..., allow_singular: bool = ...) -> None: ...
    @property
    def pinv(self): ...

class multi_rv_generic:
    _random_state: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed: Any) -> None: ...
    def _get_random_state(self, random_state: Any): ...

class multi_rv_frozen:
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed: Any) -> None: ...

class multivariate_normal_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ..., seed: Optional[Any] = ...): ...
    def _process_parameters(self, dim: Any, mean: Any, cov: Any): ...
    def _process_quantiles(self, x: Any, dim: Any): ...
    def _logpdf(self, x: Any, mean: Any, prec_U: Any, log_det_cov: Any, rank: Any): ...
    def logpdf(self, x: Any, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ...): ...
    def pdf(self, x: Any, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ...): ...
    def _cdf(self, x: Any, mean: Any, cov: Any, maxpts: Any, abseps: Any, releps: Any): ...
    def logcdf(self, x: Any, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ..., maxpts: Optional[Any] = ..., abseps: float = ..., releps: float = ...): ...
    def cdf(self, x: Any, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ..., maxpts: Optional[Any] = ..., abseps: float = ..., releps: float = ...): ...
    def rvs(self, mean: Optional[Any] = ..., cov: int = ..., size: int = ..., random_state: Optional[Any] = ...): ...
    def entropy(self, mean: Optional[Any] = ..., cov: int = ...): ...

multivariate_normal: Any

class multivariate_normal_frozen(multi_rv_frozen):
    _dist: Any = ...
    cov_info: Any = ...
    maxpts: Any = ...
    abseps: Any = ...
    releps: Any = ...
    def __init__(self, mean: Optional[Any] = ..., cov: int = ..., allow_singular: bool = ..., seed: Optional[Any] = ..., maxpts: Optional[Any] = ..., abseps: float = ..., releps: float = ...) -> None: ...
    def logpdf(self, x: Any): ...
    def pdf(self, x: Any): ...
    def logcdf(self, x: Any): ...
    def cdf(self, x: Any): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...
    def entropy(self): ...

class matrix_normal_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, mean: Optional[Any] = ..., rowcov: int = ..., colcov: int = ..., seed: Optional[Any] = ...): ...
    def _process_parameters(self, mean: Any, rowcov: Any, colcov: Any): ...
    def _process_quantiles(self, X: Any, dims: Any): ...
    def _logpdf(self, dims: Any, X: Any, mean: Any, row_prec_rt: Any, log_det_rowcov: Any, col_prec_rt: Any, log_det_colcov: Any): ...
    def logpdf(self, X: Any, mean: Optional[Any] = ..., rowcov: int = ..., colcov: int = ...): ...
    def pdf(self, X: Any, mean: Optional[Any] = ..., rowcov: int = ..., colcov: int = ...): ...
    def rvs(self, mean: Optional[Any] = ..., rowcov: int = ..., colcov: int = ..., size: int = ..., random_state: Optional[Any] = ...): ...

matrix_normal: Any

class matrix_normal_frozen(multi_rv_frozen):
    _dist: Any = ...
    rowpsd: Any = ...
    colpsd: Any = ...
    def __init__(self, mean: Optional[Any] = ..., rowcov: int = ..., colcov: int = ..., seed: Optional[Any] = ...) -> None: ...
    def logpdf(self, X: Any): ...
    def pdf(self, X: Any): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...

class dirichlet_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, alpha: Any, seed: Optional[Any] = ...): ...
    def _logpdf(self, x: Any, alpha: Any): ...
    def logpdf(self, x: Any, alpha: Any): ...
    def pdf(self, x: Any, alpha: Any): ...
    def mean(self, alpha: Any): ...
    def var(self, alpha: Any): ...
    def entropy(self, alpha: Any): ...
    def rvs(self, alpha: Any, size: int = ..., random_state: Optional[Any] = ...): ...

dirichlet: Any

class dirichlet_frozen(multi_rv_frozen):
    alpha: Any = ...
    _dist: Any = ...
    def __init__(self, alpha: Any, seed: Optional[Any] = ...) -> None: ...
    def logpdf(self, x: Any): ...
    def pdf(self, x: Any): ...
    def mean(self): ...
    def var(self): ...
    def entropy(self): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...

class wishart_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, df: Optional[Any] = ..., scale: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    def _process_parameters(self, df: Any, scale: Any): ...
    def _process_quantiles(self, x: Any, dim: Any): ...
    def _process_size(self, size: Any): ...
    def _logpdf(self, x: Any, dim: Any, df: Any, scale: Any, log_det_scale: Any, C: Any): ...
    def logpdf(self, x: Any, df: Any, scale: Any): ...
    def pdf(self, x: Any, df: Any, scale: Any): ...
    def _mean(self, dim: Any, df: Any, scale: Any): ...
    def mean(self, df: Any, scale: Any): ...
    def _mode(self, dim: Any, df: Any, scale: Any): ...
    def mode(self, df: Any, scale: Any): ...
    def _var(self, dim: Any, df: Any, scale: Any): ...
    def var(self, df: Any, scale: Any): ...
    def _standard_rvs(self, n: Any, shape: Any, dim: Any, df: Any, random_state: Any): ...
    def _rvs(self, n: Any, shape: Any, dim: Any, df: Any, C: Any, random_state: Any): ...
    def rvs(self, df: Any, scale: Any, size: int = ..., random_state: Optional[Any] = ...): ...
    def _entropy(self, dim: Any, df: Any, log_det_scale: Any): ...
    def entropy(self, df: Any, scale: Any): ...
    def _cholesky_logdet(self, scale: Any): ...

wishart: Any

class wishart_frozen(multi_rv_frozen):
    _dist: Any = ...
    def __init__(self, df: Any, scale: Any, seed: Optional[Any] = ...) -> None: ...
    def logpdf(self, x: Any): ...
    def pdf(self, x: Any): ...
    def mean(self): ...
    def mode(self): ...
    def var(self): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...
    def entropy(self): ...

class invwishart_gen(wishart_gen):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, df: Optional[Any] = ..., scale: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    def _logpdf(self, x: Any, dim: Any, df: Any, scale: Any, log_det_scale: Any): ...
    def logpdf(self, x: Any, df: Any, scale: Any): ...
    def pdf(self, x: Any, df: Any, scale: Any): ...
    def _mean(self, dim: Any, df: Any, scale: Any): ...
    def mean(self, df: Any, scale: Any): ...
    def _mode(self, dim: Any, df: Any, scale: Any): ...
    def mode(self, df: Any, scale: Any): ...
    def _var(self, dim: Any, df: Any, scale: Any): ...
    def var(self, df: Any, scale: Any): ...
    def _rvs(self, n: Any, shape: Any, dim: Any, df: Any, C: Any, random_state: Any): ...
    def rvs(self, df: Any, scale: Any, size: int = ..., random_state: Optional[Any] = ...): ...
    def entropy(self) -> None: ...

invwishart: Any

class invwishart_frozen(multi_rv_frozen):
    _dist: Any = ...
    log_det_scale: Any = ...
    inv_scale: Any = ...
    C: Any = ...
    def __init__(self, df: Any, scale: Any, seed: Optional[Any] = ...) -> None: ...
    def logpdf(self, x: Any): ...
    def pdf(self, x: Any): ...
    def mean(self): ...
    def mode(self): ...
    def var(self): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...
    def entropy(self) -> None: ...

class multinomial_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, n: Any, p: Any, seed: Optional[Any] = ...): ...
    def _process_parameters(self, n: Any, p: Any): ...
    def _process_quantiles(self, x: Any, n: Any, p: Any): ...
    def _checkresult(self, result: Any, cond: Any, bad_value: Any): ...
    def _logpmf(self, x: Any, n: Any, p: Any): ...
    def logpmf(self, x: Any, n: Any, p: Any): ...
    def pmf(self, x: Any, n: Any, p: Any): ...
    def mean(self, n: Any, p: Any): ...
    def cov(self, n: Any, p: Any): ...
    def entropy(self, n: Any, p: Any): ...
    def rvs(self, n: Any, p: Any, size: Optional[Any] = ..., random_state: Optional[Any] = ...): ...

multinomial: Any

class multinomial_frozen(multi_rv_frozen):
    _dist: Any = ...
    def __init__(self, n: Any, p: Any, seed: Optional[Any] = ...) -> None: ...
    def logpmf(self, x: Any): ...
    def pmf(self, x: Any): ...
    def mean(self): ...
    def cov(self): ...
    def entropy(self): ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...

class special_ortho_group_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def __call__(self, dim: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    def _process_parameters(self, dim: Any): ...
    def rvs(self, dim: Any, size: int = ..., random_state: Optional[Any] = ...): ...

special_ortho_group: Any

class special_ortho_group_frozen(multi_rv_frozen):
    _dist: Any = ...
    dim: Any = ...
    def __init__(self, dim: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def rvs(self, size: int = ..., random_state: Optional[Any] = ...): ...

class ortho_group_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def _process_parameters(self, dim: Any): ...
    def rvs(self, dim: Any, size: int = ..., random_state: Optional[Any] = ...): ...

ortho_group: Any

class random_correlation_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def _process_parameters(self, eigs: Any, tol: Any): ...
    def _givens_to_1(self, aii: Any, ajj: Any, aij: Any): ...
    def _to_corr(self, m: Any): ...
    def rvs(self, eigs: Any, random_state: Optional[Any] = ..., tol: float = ..., diag_tol: float = ...): ...

random_correlation: Any

class unitary_group_gen(multi_rv_generic):
    __doc__: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    def _process_parameters(self, dim: Any): ...
    def rvs(self, dim: Any, size: int = ..., random_state: Optional[Any] = ...): ...

unitary_group: Any
