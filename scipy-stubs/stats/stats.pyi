# Stubs for scipy.stats.stats (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._stats_mstats_common import linregress as linregress, theilslopes as theilslopes
from collections import namedtuple
from typing import Any, Optional

def gmean(a: Any, axis: int = ..., dtype: Optional[Any] = ...): ...
def hmean(a: Any, axis: int = ..., dtype: Optional[Any] = ...): ...

ModeResult = namedtuple('ModeResult', ['mode', 'count'])

def mode(a: Any, axis: int = ..., nan_policy: str = ...): ...
def tmean(a: Any, limits: Optional[Any] = ..., inclusive: Any = ..., axis: Optional[Any] = ...): ...
def tvar(a: Any, limits: Optional[Any] = ..., inclusive: Any = ..., axis: int = ..., ddof: int = ...): ...
def tmin(a: Any, lowerlimit: Optional[Any] = ..., axis: int = ..., inclusive: bool = ..., nan_policy: str = ...): ...
def tmax(a: Any, upperlimit: Optional[Any] = ..., axis: int = ..., inclusive: bool = ..., nan_policy: str = ...): ...
def tstd(a: Any, limits: Optional[Any] = ..., inclusive: Any = ..., axis: int = ..., ddof: int = ...): ...
def tsem(a: Any, limits: Optional[Any] = ..., inclusive: Any = ..., axis: int = ..., ddof: int = ...): ...
def moment(a: Any, moment: int = ..., axis: int = ..., nan_policy: str = ...): ...
def variation(a: Any, axis: int = ..., nan_policy: str = ...): ...
def skew(a: Any, axis: int = ..., bias: bool = ..., nan_policy: str = ...): ...
def kurtosis(a: Any, axis: int = ..., fisher: bool = ..., bias: bool = ..., nan_policy: str = ...): ...

DescribeResult = namedtuple('DescribeResult', ['nobs', 'minmax', 'mean', 'variance', 'skewness', 'kurtosis'])

def describe(a: Any, axis: int = ..., ddof: int = ..., bias: bool = ..., nan_policy: str = ...): ...

SkewtestResult = namedtuple('SkewtestResult', ['statistic', 'pvalue'])

def skewtest(a: Any, axis: int = ..., nan_policy: str = ...): ...

KurtosistestResult = namedtuple('KurtosistestResult', ['statistic', 'pvalue'])

def kurtosistest(a: Any, axis: int = ..., nan_policy: str = ...): ...

NormaltestResult = namedtuple('NormaltestResult', ['statistic', 'pvalue'])

def normaltest(a: Any, axis: int = ..., nan_policy: str = ...): ...
def jarque_bera(x: Any): ...
def itemfreq(a: Any): ...
def scoreatpercentile(a: Any, per: Any, limit: Any = ..., interpolation_method: str = ..., axis: Optional[Any] = ...): ...
def percentileofscore(a: Any, score: Any, kind: str = ...): ...

HistogramResult = namedtuple('HistogramResult', ['count', 'lowerlimit', 'binsize', 'extrapoints'])

CumfreqResult = namedtuple('CumfreqResult', ['cumcount', 'lowerlimit', 'binsize', 'extrapoints'])

def cumfreq(a: Any, numbins: int = ..., defaultreallimits: Optional[Any] = ..., weights: Optional[Any] = ...): ...

RelfreqResult = namedtuple('RelfreqResult', ['frequency', 'lowerlimit', 'binsize', 'extrapoints'])

def relfreq(a: Any, numbins: int = ..., defaultreallimits: Optional[Any] = ..., weights: Optional[Any] = ...): ...
def obrientransform(*args: Any): ...
def sem(a: Any, axis: int = ..., ddof: int = ..., nan_policy: str = ...): ...
def zscore(a: Any, axis: int = ..., ddof: int = ...): ...
def zmap(scores: Any, compare: Any, axis: int = ..., ddof: int = ...): ...
def iqr(x: Any, axis: Optional[Any] = ..., rng: Any = ..., scale: str = ..., nan_policy: str = ..., interpolation: str = ..., keepdims: bool = ...): ...

SigmaclipResult = namedtuple('SigmaclipResult', ['clipped', 'lower', 'upper'])

def sigmaclip(a: Any, low: float = ..., high: float = ...): ...
def trimboth(a: Any, proportiontocut: Any, axis: int = ...): ...
def trim1(a: Any, proportiontocut: Any, tail: str = ..., axis: int = ...): ...
def trim_mean(a: Any, proportiontocut: Any, axis: int = ...): ...

F_onewayResult = namedtuple('F_onewayResult', ['statistic', 'pvalue'])

def f_oneway(*args: Any): ...
def pearsonr(x: Any, y: Any): ...
def fisher_exact(table: Any, alternative: str = ...): ...

SpearmanrResult = namedtuple('SpearmanrResult', ['correlation', 'pvalue'])

def spearmanr(a: Any, b: Optional[Any] = ..., axis: int = ..., nan_policy: str = ...): ...

PointbiserialrResult = namedtuple('PointbiserialrResult', ['correlation', 'pvalue'])

def pointbiserialr(x: Any, y: Any): ...

KendalltauResult = namedtuple('KendalltauResult', ['correlation', 'pvalue'])

def kendalltau(x: Any, y: Any, initial_lexsort: Optional[Any] = ..., nan_policy: str = ...): ...

WeightedTauResult = namedtuple('WeightedTauResult', ['correlation', 'pvalue'])

def weightedtau(x: Any, y: Any, rank: bool = ..., weigher: Optional[Any] = ..., additive: bool = ...): ...

Ttest_1sampResult = namedtuple('Ttest_1sampResult', ['statistic', 'pvalue'])

def ttest_1samp(a: Any, popmean: Any, axis: int = ..., nan_policy: str = ...): ...

Ttest_indResult = namedtuple('Ttest_indResult', ['statistic', 'pvalue'])

def ttest_ind_from_stats(mean1: Any, std1: Any, nobs1: Any, mean2: Any, std2: Any, nobs2: Any, equal_var: bool = ...): ...
def ttest_ind(a: Any, b: Any, axis: int = ..., equal_var: bool = ..., nan_policy: str = ...): ...

Ttest_relResult = namedtuple('Ttest_relResult', ['statistic', 'pvalue'])

def ttest_rel(a: Any, b: Any, axis: int = ..., nan_policy: str = ...): ...

KstestResult = namedtuple('KstestResult', ['statistic', 'pvalue'])

def kstest(rvs: Any, cdf: Any, args: Any = ..., N: int = ..., alternative: str = ..., mode: str = ...): ...

Power_divergenceResult = namedtuple('Power_divergenceResult', ['statistic', 'pvalue'])

def power_divergence(f_obs: Any, f_exp: Optional[Any] = ..., ddof: int = ..., axis: int = ..., lambda_: Optional[Any] = ...): ...
def chisquare(f_obs: Any, f_exp: Optional[Any] = ..., ddof: int = ..., axis: int = ...): ...

Ks_2sampResult = namedtuple('Ks_2sampResult', ['statistic', 'pvalue'])

def ks_2samp(data1: Any, data2: Any): ...
def tiecorrect(rankvals: Any): ...

MannwhitneyuResult = namedtuple('MannwhitneyuResult', ['statistic', 'pvalue'])

def mannwhitneyu(x: Any, y: Any, use_continuity: bool = ..., alternative: Optional[Any] = ...): ...

RanksumsResult = namedtuple('RanksumsResult', ['statistic', 'pvalue'])

def ranksums(x: Any, y: Any): ...

KruskalResult = namedtuple('KruskalResult', ['statistic', 'pvalue'])

def kruskal(*args: Any, **kwargs: Any): ...

FriedmanchisquareResult = namedtuple('FriedmanchisquareResult', ['statistic', 'pvalue'])

def friedmanchisquare(*args: Any): ...
def combine_pvalues(pvalues: Any, method: str = ..., weights: Optional[Any] = ...): ...
def wasserstein_distance(u_values: Any, v_values: Any, u_weights: Optional[Any] = ..., v_weights: Optional[Any] = ...): ...
def energy_distance(u_values: Any, v_values: Any, u_weights: Optional[Any] = ..., v_weights: Optional[Any] = ...): ...

RepeatedResults = namedtuple('RepeatedResults', ['values', 'counts'])

def find_repeats(arr: Any): ...
def rankdata(a: Any, method: str = ...): ...
