# Stubs for scipy.stats.morestats (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from typing import Any, Optional

Mean = namedtuple('Mean', ['statistic', 'minmax'])

Variance = namedtuple('Variance', ['statistic', 'minmax'])

Std_dev = namedtuple('Std_dev', ['statistic', 'minmax'])

def bayes_mvs(data: Any, alpha: float = ...): ...
def mvsdist(data: Any): ...
def kstat(data: Any, n: int = ...): ...
def kstatvar(data: Any, n: int = ...): ...
def probplot(x: Any, sparams: Any = ..., dist: str = ..., fit: bool = ..., plot: Optional[Any] = ..., rvalue: bool = ...): ...
def ppcc_max(x: Any, brack: Any = ..., dist: str = ...): ...
def ppcc_plot(x: Any, a: Any, b: Any, dist: str = ..., plot: Optional[Any] = ..., N: int = ...): ...
def boxcox_llf(lmb: Any, data: Any): ...
def boxcox(x: Any, lmbda: Optional[Any] = ..., alpha: Optional[Any] = ...): ...
def boxcox_normmax(x: Any, brack: Any = ..., method: str = ...): ...
def boxcox_normplot(x: Any, la: Any, lb: Any, plot: Optional[Any] = ..., N: int = ...): ...
def shapiro(x: Any): ...

AndersonResult = namedtuple('AndersonResult', ['statistic', 'critical_values', 'significance_level'])

def anderson(x: Any, dist: str = ...): ...

Anderson_ksampResult = namedtuple('Anderson_ksampResult', ['statistic', 'critical_values', 'significance_level'])

def anderson_ksamp(samples: Any, midrank: bool = ...): ...

AnsariResult = namedtuple('AnsariResult', ['statistic', 'pvalue'])

def ansari(x: Any, y: Any): ...

BartlettResult = namedtuple('BartlettResult', ['statistic', 'pvalue'])

def bartlett(*args: Any): ...

LeveneResult = namedtuple('LeveneResult', ['statistic', 'pvalue'])

def levene(*args: Any, **kwds: Any): ...
def binom_test(x: Any, n: Optional[Any] = ..., p: float = ..., alternative: str = ...): ...

FlignerResult = namedtuple('FlignerResult', ['statistic', 'pvalue'])

def fligner(*args: Any, **kwds: Any): ...
def mood(x: Any, y: Any, axis: int = ...): ...

WilcoxonResult = namedtuple('WilcoxonResult', ['statistic', 'pvalue'])

def wilcoxon(x: Any, y: Optional[Any] = ..., zero_method: str = ..., correction: bool = ...): ...
def median_test(*args: Any, **kwds: Any): ...
def circmean(samples: Any, high: Any = ..., low: int = ..., axis: Optional[Any] = ...): ...
def circvar(samples: Any, high: Any = ..., low: int = ..., axis: Optional[Any] = ...): ...
def circstd(samples: Any, high: Any = ..., low: int = ..., axis: Optional[Any] = ...): ...
