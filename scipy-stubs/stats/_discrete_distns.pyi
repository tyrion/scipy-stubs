# Stubs for scipy.stats._discrete_distns (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._distn_infrastructure import rv_discrete
from typing import Any

class binom_gen(rv_discrete):
    def _rvs(self, n: Any, p: Any): ...
    b: Any = ...
    def _argcheck(self, n: Any, p: Any): ...
    def _logpmf(self, x: Any, n: Any, p: Any): ...
    def _pmf(self, x: Any, n: Any, p: Any): ...
    def _cdf(self, x: Any, n: Any, p: Any): ...
    def _sf(self, x: Any, n: Any, p: Any): ...
    def _ppf(self, q: Any, n: Any, p: Any): ...
    def _stats(self, n: Any, p: Any, moments: str = ...): ...
    def _entropy(self, n: Any, p: Any): ...

binom: Any

class bernoulli_gen(binom_gen):
    def _rvs(self, p: Any): ...
    def _argcheck(self, p: Any): ...
    def _logpmf(self, x: Any, p: Any): ...
    def _pmf(self, x: Any, p: Any): ...
    def _cdf(self, x: Any, p: Any): ...
    def _sf(self, x: Any, p: Any): ...
    def _ppf(self, q: Any, p: Any): ...
    def _stats(self, p: Any): ...
    def _entropy(self, p: Any): ...

bernoulli: Any

class nbinom_gen(rv_discrete):
    def _rvs(self, n: Any, p: Any): ...
    def _argcheck(self, n: Any, p: Any): ...
    def _pmf(self, x: Any, n: Any, p: Any): ...
    def _logpmf(self, x: Any, n: Any, p: Any): ...
    def _cdf(self, x: Any, n: Any, p: Any): ...
    def _sf_skip(self, x: Any, n: Any, p: Any): ...
    def _ppf(self, q: Any, n: Any, p: Any): ...
    def _stats(self, n: Any, p: Any): ...

nbinom: Any

class geom_gen(rv_discrete):
    def _rvs(self, p: Any): ...
    def _argcheck(self, p: Any): ...
    def _pmf(self, k: Any, p: Any): ...
    def _logpmf(self, k: Any, p: Any): ...
    def _cdf(self, x: Any, p: Any): ...
    def _sf(self, x: Any, p: Any): ...
    def _logsf(self, x: Any, p: Any): ...
    def _ppf(self, q: Any, p: Any): ...
    def _stats(self, p: Any): ...

geom: Any

class hypergeom_gen(rv_discrete):
    def _rvs(self, M: Any, n: Any, N: Any): ...
    a: Any = ...
    b: Any = ...
    def _argcheck(self, M: Any, n: Any, N: Any): ...
    def _logpmf(self, k: Any, M: Any, n: Any, N: Any): ...
    def _pmf(self, k: Any, M: Any, n: Any, N: Any): ...
    def _stats(self, M: Any, n: Any, N: Any): ...
    def _entropy(self, M: Any, n: Any, N: Any): ...
    def _sf(self, k: Any, M: Any, n: Any, N: Any): ...
    def _logsf(self, k: Any, M: Any, n: Any, N: Any): ...

hypergeom: Any

class logser_gen(rv_discrete):
    def _rvs(self, p: Any): ...
    def _argcheck(self, p: Any): ...
    def _pmf(self, k: Any, p: Any): ...
    def _stats(self, p: Any): ...

logser: Any

class poisson_gen(rv_discrete):
    def _argcheck(self, mu: Any): ...
    def _rvs(self, mu: Any): ...
    def _logpmf(self, k: Any, mu: Any): ...
    def _pmf(self, k: Any, mu: Any): ...
    def _cdf(self, x: Any, mu: Any): ...
    def _sf(self, x: Any, mu: Any): ...
    def _ppf(self, q: Any, mu: Any): ...
    def _stats(self, mu: Any): ...

poisson: Any

class planck_gen(rv_discrete):
    a: Any = ...
    b: Any = ...
    def _argcheck(self, lambda_: Any): ...
    def _pmf(self, k: Any, lambda_: Any): ...
    def _cdf(self, x: Any, lambda_: Any): ...
    def _sf(self, x: Any, lambda_: Any): ...
    def _logsf(self, x: Any, lambda_: Any): ...
    def _ppf(self, q: Any, lambda_: Any): ...
    def _stats(self, lambda_: Any): ...
    def _entropy(self, lambda_: Any): ...

planck: Any

class boltzmann_gen(rv_discrete):
    def _pmf(self, k: Any, lambda_: Any, N: Any): ...
    def _cdf(self, x: Any, lambda_: Any, N: Any): ...
    def _ppf(self, q: Any, lambda_: Any, N: Any): ...
    def _stats(self, lambda_: Any, N: Any): ...

boltzmann: Any

class randint_gen(rv_discrete):
    a: Any = ...
    b: Any = ...
    def _argcheck(self, low: Any, high: Any): ...
    def _pmf(self, k: Any, low: Any, high: Any): ...
    def _cdf(self, x: Any, low: Any, high: Any): ...
    def _ppf(self, q: Any, low: Any, high: Any): ...
    def _stats(self, low: Any, high: Any): ...
    def _rvs(self, low: Any, high: Any): ...
    def _entropy(self, low: Any, high: Any): ...

randint: Any

class zipf_gen(rv_discrete):
    def _rvs(self, a: Any): ...
    def _argcheck(self, a: Any): ...
    def _pmf(self, k: Any, a: Any): ...
    def _munp(self, n: Any, a: Any): ...

zipf: Any

class dlaplace_gen(rv_discrete):
    def _pmf(self, k: Any, a: Any): ...
    def _cdf(self, x: Any, a: Any): ...
    def _ppf(self, q: Any, a: Any): ...
    def _stats(self, a: Any): ...
    def _entropy(self, a: Any): ...

dlaplace: Any

class skellam_gen(rv_discrete):
    def _rvs(self, mu1: Any, mu2: Any): ...
    def _pmf(self, x: Any, mu1: Any, mu2: Any): ...
    def _cdf(self, x: Any, mu1: Any, mu2: Any): ...
    def _stats(self, mu1: Any, mu2: Any): ...

skellam: Any
