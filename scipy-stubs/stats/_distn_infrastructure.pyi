# Stubs for scipy.stats._distn_infrastructure (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from ._constants import _XMAX
from ._distr_params import distcont, distdiscrete
from typing import Any, Optional

def instancemethod(func: Any, obj: Any, cls: Any): ...

instancemethod: Any
docheaders: Any
_doc_rvs: str
_doc_pdf: str
_doc_logpdf: str
_doc_pmf: str
_doc_logpmf: str
_doc_cdf: str
_doc_logcdf: str
_doc_sf: str
_doc_logsf: str
_doc_ppf: str
_doc_isf: str
_doc_moment: str
_doc_stats: str
_doc_entropy: str
_doc_fit: str
_doc_expect: str
_doc_expect_discrete: str
_doc_median: str
_doc_mean: str
_doc_var: str
_doc_std: str
_doc_interval: str
_doc_allmethods: Any
_doc_default_longsummary: str
_doc_default_frozen_note: str
_doc_default_example: str
_doc_default_locscale: str
_doc_default: Any
_doc_default_before_notes: Any
docdict: Any
docdict_discrete: Any
_doc_disc_methods: Any
_doc_disc_methods_err_varname: Any
_doc_default_discrete_example: str
_doc_default_discrete_locscale: str
_doc_default_disc: Any

def _moment(data: Any, n: Any, mu: Optional[Any] = ...): ...
def _moment_from_stats(n: Any, mu: Any, mu2: Any, g1: Any, g2: Any, moment_func: Any, args: Any): ...
def _skew(data: Any): ...
def _kurtosis(data: Any): ...

class rv_frozen:
    args: Any = ...
    kwds: Any = ...
    dist: Any = ...
    def __init__(self, dist: Any, *args: Any, **kwds: Any) -> None: ...
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed: Any) -> None: ...
    def pdf(self, x: Any): ...
    def logpdf(self, x: Any): ...
    def cdf(self, x: Any): ...
    def logcdf(self, x: Any): ...
    def ppf(self, q: Any): ...
    def isf(self, q: Any): ...
    def rvs(self, size: Optional[Any] = ..., random_state: Optional[Any] = ...): ...
    def sf(self, x: Any): ...
    def logsf(self, x: Any): ...
    def stats(self, moments: str = ...): ...
    def median(self): ...
    def mean(self): ...
    def var(self): ...
    def std(self): ...
    def moment(self, n: Any): ...
    def entropy(self): ...
    def pmf(self, k: Any): ...
    def logpmf(self, k: Any): ...
    def interval(self, alpha: Any): ...
    def expect(self, func: Optional[Any] = ..., lb: Optional[Any] = ..., ub: Optional[Any] = ..., conditional: bool = ..., **kwds: Any): ...

def argsreduce(cond: Any, *args: Any): ...

parse_arg_template: str

def _ncx2_log_pdf(x: Any, df: Any, nc: Any): ...
def _ncx2_pdf(x: Any, df: Any, nc: Any): ...
def _ncx2_cdf(x: Any, df: Any, nc: Any): ...

class rv_generic:
    _stats_has_moments: Any = ...
    _random_state: Any = ...
    def __init__(self, seed: Optional[Any] = ...) -> None: ...
    @property
    def random_state(self): ...
    @random_state.setter
    def random_state(self, seed: Any) -> None: ...
    def __getstate__(self): ...
    def __setstate__(self, state: Any): ...
    shapes: Any = ...
    numargs: Any = ...
    def _construct_argparser(self, meths_to_inspect: Any, locscale_in: Any, locscale_out: Any) -> None: ...
    __doc__: Any = ...
    def _construct_doc(self, docdict: Any, shapes_vals: Optional[Any] = ...) -> None: ...
    def _construct_default_doc(self, longname: Optional[Any] = ..., extradoc: Optional[Any] = ..., docdict: Optional[Any] = ..., discrete: str = ...) -> None: ...
    def freeze(self, *args: Any, **kwds: Any): ...
    def __call__(self, *args: Any, **kwds: Any): ...
    def _stats(self, *args: Any, **kwds: Any): ...
    def _munp(self, n: Any, *args: Any): ...
    def _argcheck_rvs(self, *args: Any, **kwargs: Any): ...
    def _argcheck(self, *args: Any): ...
    def _support_mask(self, x: Any): ...
    def _open_support_mask(self, x: Any): ...
    def _rvs(self, *args: Any): ...
    def _logcdf(self, x: Any, *args: Any): ...
    def _sf(self, x: Any, *args: Any): ...
    def _logsf(self, x: Any, *args: Any): ...
    def _ppf(self, q: Any, *args: Any): ...
    def _isf(self, q: Any, *args: Any): ...
    _size: Any = ...
    def rvs(self, *args: Any, **kwds: Any): ...
    def stats(self, *args: Any, **kwds: Any): ...
    def entropy(self, *args: Any, **kwds: Any): ...
    def moment(self, n: Any, *args: Any, **kwds: Any): ...
    def median(self, *args: Any, **kwds: Any): ...
    def mean(self, *args: Any, **kwds: Any): ...
    def var(self, *args: Any, **kwds: Any): ...
    def std(self, *args: Any, **kwds: Any): ...
    def interval(self, alpha: Any, *args: Any, **kwds: Any): ...

class rv_continuous(rv_generic):
    _ctor_param: Any = ...
    badvalue: Any = ...
    name: Any = ...
    a: Any = ...
    b: Any = ...
    xtol: Any = ...
    moment_type: Any = ...
    shapes: Any = ...
    _ppfvec: Any = ...
    vecentropy: Any = ...
    _cdfvec: Any = ...
    extradoc: Any = ...
    generic_moment: Any = ...
    def __init__(self, momtype: int = ..., a: Optional[Any] = ..., b: Optional[Any] = ..., xtol: float = ..., badvalue: Optional[Any] = ..., name: Optional[Any] = ..., longname: Optional[Any] = ..., shapes: Optional[Any] = ..., extradoc: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def _updated_ctor_param(self): ...
    def _ppf_to_solve(self, x: Any, q: Any, *args: Any): ...
    def _ppf_single(self, q: Any, *args: Any): ...
    def _mom_integ0(self, x: Any, m: Any, *args: Any): ...
    def _mom0_sc(self, m: Any, *args: Any): ...
    def _mom_integ1(self, q: Any, m: Any, *args: Any): ...
    def _mom1_sc(self, m: Any, *args: Any): ...
    def _pdf(self, x: Any, *args: Any): ...
    def _logpdf(self, x: Any, *args: Any): ...
    def _cdf_single(self, x: Any, *args: Any): ...
    def _cdf(self, x: Any, *args: Any): ...
    def pdf(self, x: Any, *args: Any, **kwds: Any): ...
    def logpdf(self, x: Any, *args: Any, **kwds: Any): ...
    def cdf(self, x: Any, *args: Any, **kwds: Any): ...
    def logcdf(self, x: Any, *args: Any, **kwds: Any): ...
    def sf(self, x: Any, *args: Any, **kwds: Any): ...
    def logsf(self, x: Any, *args: Any, **kwds: Any): ...
    def ppf(self, q: Any, *args: Any, **kwds: Any): ...
    def isf(self, q: Any, *args: Any, **kwds: Any): ...
    def _nnlf(self, x: Any, *args: Any): ...
    def _unpack_loc_scale(self, theta: Any): ...
    def nnlf(self, theta: Any, x: Any): ...
    def _nnlf_and_penalty(self, x: Any, args: Any): ...
    def _penalized_nnlf(self, theta: Any, x: Any): ...
    def _fitstart(self, data: Any, args: Optional[Any] = ...): ...
    def _reduce_func(self, args: Any, kwds: Any): ...
    def fit(self, data: Any, *args: Any, **kwds: Any): ...
    def _fit_loc_scale_support(self, data: Any, *args: Any): ...
    def fit_loc_scale(self, data: Any, *args: Any): ...
    def _entropy(self, *args: Any): ...
    def expect(self, func: Optional[Any] = ..., args: Any = ..., loc: int = ..., scale: int = ..., lb: Optional[Any] = ..., ub: Optional[Any] = ..., conditional: bool = ..., **kwds: Any): ...

def _drv2_moment(self, n: Any, *args: Any): ...
def _drv2_ppfsingle(self, q: Any, *args: Any): ...
def entropy(pk: Any, qk: Optional[Any] = ..., base: Optional[Any] = ...): ...

class rv_discrete(rv_generic):
    def __new__(cls, a: int = ..., b: Any = ..., name: Optional[Any] = ..., badvalue: Optional[Any] = ..., moment_tol: float = ..., values: Optional[Any] = ..., inc: int = ..., longname: Optional[Any] = ..., shapes: Optional[Any] = ..., extradoc: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    _ctor_param: Any = ...
    badvalue: Any = ...
    a: Any = ...
    b: Any = ...
    moment_tol: Any = ...
    inc: Any = ...
    _cdfvec: Any = ...
    vecentropy: Any = ...
    shapes: Any = ...
    generic_moment: Any = ...
    _ppfvec: Any = ...
    def __init__(self, a: int = ..., b: Any = ..., name: Optional[Any] = ..., badvalue: Optional[Any] = ..., moment_tol: float = ..., values: Optional[Any] = ..., inc: int = ..., longname: Optional[Any] = ..., shapes: Optional[Any] = ..., extradoc: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    name: Any = ...
    extradoc: Any = ...
    __doc__: Any = ...
    def _construct_docstrings(self, name: Any, longname: Any, extradoc: Any) -> None: ...
    def _updated_ctor_param(self): ...
    def _nonzero(self, k: Any, *args: Any): ...
    def _pmf(self, k: Any, *args: Any): ...
    def _logpmf(self, k: Any, *args: Any): ...
    def _cdf_single(self, k: Any, *args: Any): ...
    def _cdf(self, x: Any, *args: Any): ...
    def rvs(self, *args: Any, **kwargs: Any): ...
    def pmf(self, k: Any, *args: Any, **kwds: Any): ...
    def logpmf(self, k: Any, *args: Any, **kwds: Any): ...
    def cdf(self, k: Any, *args: Any, **kwds: Any): ...
    def logcdf(self, k: Any, *args: Any, **kwds: Any): ...
    def sf(self, k: Any, *args: Any, **kwds: Any): ...
    def logsf(self, k: Any, *args: Any, **kwds: Any): ...
    def ppf(self, q: Any, *args: Any, **kwds: Any): ...
    def isf(self, q: Any, *args: Any, **kwds: Any): ...
    def _entropy(self, *args: Any): ...
    def expect(self, func: Optional[Any] = ..., args: Any = ..., loc: int = ..., lb: Optional[Any] = ..., ub: Optional[Any] = ..., conditional: bool = ..., maxcount: int = ..., tolerance: float = ..., chunksize: int = ...): ...

def _expect(fun: Any, lb: Any, ub: Any, x0: Any, inc: Any, maxcount: int = ..., tolerance: float = ..., chunksize: int = ...): ...
def _iter_chunked(x0: Any, x1: Any, chunksize: int = ..., inc: int = ...) -> None: ...

class rv_sample(rv_discrete):
    _ctor_param: Any = ...
    badvalue: Any = ...
    moment_tol: Any = ...
    inc: Any = ...
    shapes: Any = ...
    vecentropy: Any = ...
    xk: Any = ...
    pk: Any = ...
    a: Any = ...
    b: Any = ...
    qvals: Any = ...
    def __init__(self, a: int = ..., b: Any = ..., name: Optional[Any] = ..., badvalue: Optional[Any] = ..., moment_tol: float = ..., values: Optional[Any] = ..., inc: int = ..., longname: Optional[Any] = ..., shapes: Optional[Any] = ..., extradoc: Optional[Any] = ..., seed: Optional[Any] = ...) -> None: ...
    def _pmf(self, x: Any): ...
    def _cdf(self, x: Any): ...
    def _ppf(self, q: Any): ...
    def _rvs(self): ...
    def _entropy(self): ...
    def generic_moment(self, n: Any): ...

def get_distribution_names(namespace_pairs: Any, rv_base_class: Any): ...
