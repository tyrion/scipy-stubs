# Stubs for scipy.linalg._matfuncs_inv_ssq (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

import numpy as np
from scipy.sparse.linalg.interface import LinearOperator
from typing import Any

class LogmRankWarning(UserWarning): ...
class LogmExactlySingularWarning(LogmRankWarning): ...
class LogmNearlySingularWarning(LogmRankWarning): ...
class LogmError(np.linalg.LinAlgError): ...
class FractionalMatrixPowerError(np.linalg.LinAlgError): ...

class _MatrixM1PowerOperator(LinearOperator):
    _A: Any = ...
    _p: Any = ...
    ndim: Any = ...
    shape: Any = ...
    def __init__(self, A: Any, p: Any) -> None: ...
    def _matvec(self, x: Any): ...
    def _rmatvec(self, x: Any): ...
    def _matmat(self, X: Any): ...
    def _adjoint(self): ...

def _onenormest_m1_power(A: Any, p: Any, t: int = ..., itmax: int = ..., compute_v: bool = ..., compute_w: bool = ...): ...
def _unwindk(z: Any): ...
def _briggs_helper_function(a: Any, k: Any): ...
def _fractional_power_superdiag_entry(l1: Any, l2: Any, t12: Any, p: Any): ...
def _logm_superdiag_entry(l1: Any, l2: Any, t12: Any): ...
def _inverse_squaring_helper(T0: Any, theta: Any): ...
def _fractional_power_pade_constant(i: Any, t: Any): ...
def _fractional_power_pade(R: Any, t: Any, m: Any): ...
def _remainder_matrix_power_triu(T: Any, t: Any): ...
def _remainder_matrix_power(A: Any, t: Any): ...
def _fractional_matrix_power(A: Any, p: Any): ...
def _logm_triu(T: Any): ...
def _logm_force_nonsingular_triangular_matrix(T: Any, inplace: bool = ...): ...
def _logm(A: Any): ...
