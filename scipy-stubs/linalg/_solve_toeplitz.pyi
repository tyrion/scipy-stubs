# Stubs for scipy.linalg._solve_toeplitz (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

import numpy
asarray: Any
levinson: Any

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def zeros(*args, **kwargs) -> Any: ...

class LinAlgError(Exception): ...

class complex128(numpy.complexfloating, complex):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __abs__(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self, *args, **kwargs) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, *args, **kwargs) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, *args, **kwargs) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, *args, **kwargs) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, *args, **kwargs) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, *args, **kwargs) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, *args, **kwargs) -> Any: ...
    def __rshift__(self, *args, **kwargs) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, *args, **kwargs) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, *args, **kwargs) -> Any: ...

class float64(numpy.floating, float):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __abs__(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, *args, **kwargs) -> Any: ...
    def __bool__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self, *args, **kwargs) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, *args, **kwargs) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, *args, **kwargs) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, *args, **kwargs) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, *args, **kwargs) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, *args, **kwargs) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, *args, **kwargs) -> Any: ...
    def __rshift__(self, *args, **kwargs) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, *args, **kwargs) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, *args, **kwargs) -> Any: ...
