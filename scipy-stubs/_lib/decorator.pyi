# Stubs for scipy._lib.decorator (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from collections import namedtuple
from contextlib import GeneratorContextManager as _GeneratorContextManager
from typing import Any, Optional

__version__: str

def get_init(cls): ...

class getfullargspec:
    kwonlyargs: Any = ...
    kwonlydefaults: Any = ...
    def __init__(self, f: Any) -> None: ...
    def __iter__(self) -> None: ...
    getargspec: Any = ...

ArgSpec = namedtuple('ArgSpec', 'args varargs varkw defaults')

def getargspec(f: Any): ...

DEF: Any

class FunctionMaker:
    _compile_count: Any = ...
    shortsignature: Any = ...
    name: Any = ...
    doc: Any = ...
    module: Any = ...
    annotations: Any = ...
    signature: Any = ...
    dict: Any = ...
    defaults: Any = ...
    def __init__(self, func: Optional[Any] = ..., name: Optional[Any] = ..., signature: Optional[Any] = ..., defaults: Optional[Any] = ..., doc: Optional[Any] = ..., module: Optional[Any] = ..., funcdict: Optional[Any] = ...) -> None: ...
    def update(self, func: Any, **kw: Any) -> None: ...
    def make(self, src_templ: Any, evaldict: Optional[Any] = ..., addsource: bool = ..., **attrs: Any): ...
    @classmethod
    def create(cls, obj: Any, body: Any, evaldict: Any, defaults: Optional[Any] = ..., doc: Optional[Any] = ..., module: Optional[Any] = ..., addsource: bool = ..., **attrs: Any): ...

def decorate(func: Any, caller: Any): ...
def decorator(caller: Any, _func: Optional[Any] = ...): ...

class ContextManager(_GeneratorContextManager):
    def __call__(self, func: Any): ...

init: Any
n_args: Any

def __init__(self, g: Any, *a: Any, **k: Any) -> None: ...

contextmanager: Any

def append(a: Any, vancestors: Any) -> None: ...
def dispatch_on(*dispatch_args: Any): ...
