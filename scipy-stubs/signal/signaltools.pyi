# Stubs for scipy.signal.signaltools (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

def correlate(in1: Any, in2: Any, mode: str = ..., method: str = ...): ...
def fftconvolve(in1: Any, in2: Any, mode: str = ...): ...
def choose_conv_method(in1: Any, in2: Any, mode: str = ..., measure: bool = ...): ...
def convolve(in1: Any, in2: Any, mode: str = ..., method: str = ...): ...
def order_filter(a: Any, domain: Any, rank: Any): ...
def medfilt(volume: Any, kernel_size: Optional[Any] = ...): ...
def wiener(im: Any, mysize: Optional[Any] = ..., noise: Optional[Any] = ...): ...
def convolve2d(in1: Any, in2: Any, mode: str = ..., boundary: str = ..., fillvalue: int = ...): ...
def correlate2d(in1: Any, in2: Any, mode: str = ..., boundary: str = ..., fillvalue: int = ...): ...
def medfilt2d(input: Any, kernel_size: int = ...): ...
def lfilter(b: Any, a: Any, x: Any, axis: int = ..., zi: Optional[Any] = ...): ...
def lfiltic(b: Any, a: Any, y: Any, x: Optional[Any] = ...): ...
def deconvolve(signal: Any, divisor: Any): ...
def hilbert(x: Any, N: Optional[Any] = ..., axis: int = ...): ...
def hilbert2(x: Any, N: Optional[Any] = ...): ...
def cmplx_sort(p: Any): ...
def unique_roots(p: Any, tol: float = ..., rtype: str = ...): ...
def invres(r: Any, p: Any, k: Any, tol: float = ..., rtype: str = ...): ...
def residue(b: Any, a: Any, tol: float = ..., rtype: str = ...): ...
def residuez(b: Any, a: Any, tol: float = ..., rtype: str = ...): ...
def invresz(r: Any, p: Any, k: Any, tol: float = ..., rtype: str = ...): ...
def resample(x: Any, num: Any, t: Optional[Any] = ..., axis: int = ..., window: Optional[Any] = ...): ...
def resample_poly(x: Any, up: Any, down: Any, axis: int = ..., window: Any = ...): ...
def vectorstrength(events: Any, period: Any): ...
def detrend(data: Any, axis: int = ..., type: str = ..., bp: int = ...): ...
def lfilter_zi(b: Any, a: Any): ...
def sosfilt_zi(sos: Any): ...
def filtfilt(b: Any, a: Any, x: Any, axis: int = ..., padtype: str = ..., padlen: Optional[Any] = ..., method: str = ..., irlen: Optional[Any] = ...): ...
def sosfilt(sos: Any, x: Any, axis: int = ..., zi: Optional[Any] = ...): ...
def sosfiltfilt(sos: Any, x: Any, axis: int = ..., padtype: str = ..., padlen: Optional[Any] = ...): ...
def decimate(x: Any, q: Any, n: Optional[Any] = ..., ftype: str = ..., axis: int = ..., zero_phase: bool = ...): ...
