# Stubs for scipy.signal.filter_design (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from numpy import absolute
from typing import Any, Optional

class BadCoefficients(UserWarning): ...
abs = absolute

def findfreqs(num: Any, den: Any, N: Any, kind: str = ...): ...
def freqs(b: Any, a: Any, worN: int = ..., plot: Optional[Any] = ...): ...
def freqs_zpk(z: Any, p: Any, k: Any, worN: int = ...): ...
def freqz(b: Any, a: int = ..., worN: int = ..., whole: bool = ..., plot: Optional[Any] = ...): ...
def freqz_zpk(z: Any, p: Any, k: Any, worN: int = ..., whole: bool = ...): ...
def group_delay(system: Any, w: int = ..., whole: bool = ...): ...
def sosfreqz(sos: Any, worN: Optional[Any] = ..., whole: bool = ...): ...
def tf2zpk(b: Any, a: Any): ...
def zpk2tf(z: Any, p: Any, k: Any): ...
def tf2sos(b: Any, a: Any, pairing: str = ...): ...
def sos2tf(sos: Any): ...
def sos2zpk(sos: Any): ...
def zpk2sos(z: Any, p: Any, k: Any, pairing: str = ...): ...
def normalize(b: Any, a: Any): ...
def lp2lp(b: Any, a: Any, wo: float = ...): ...
def lp2hp(b: Any, a: Any, wo: float = ...): ...
def lp2bp(b: Any, a: Any, wo: float = ..., bw: float = ...): ...
def lp2bs(b: Any, a: Any, wo: float = ..., bw: float = ...): ...
def bilinear(b: Any, a: Any, fs: float = ...): ...
def iirdesign(wp: Any, ws: Any, gpass: Any, gstop: Any, analog: bool = ..., ftype: str = ..., output: str = ...): ...
def iirfilter(N: Any, Wn: Any, rp: Optional[Any] = ..., rs: Optional[Any] = ..., btype: str = ..., analog: bool = ..., ftype: str = ..., output: str = ...): ...
def bilinear_zpk(z: Any, p: Any, k: Any, fs: Any): ...
def lp2lp_zpk(z: Any, p: Any, k: Any, wo: float = ...): ...
def lp2hp_zpk(z: Any, p: Any, k: Any, wo: float = ...): ...
def lp2bp_zpk(z: Any, p: Any, k: Any, wo: float = ..., bw: float = ...): ...
def lp2bs_zpk(z: Any, p: Any, k: Any, wo: float = ..., bw: float = ...): ...
def butter(N: Any, Wn: Any, btype: str = ..., analog: bool = ..., output: str = ...): ...
def cheby1(N: Any, rp: Any, Wn: Any, btype: str = ..., analog: bool = ..., output: str = ...): ...
def cheby2(N: Any, rs: Any, Wn: Any, btype: str = ..., analog: bool = ..., output: str = ...): ...
def ellip(N: Any, rp: Any, rs: Any, Wn: Any, btype: str = ..., analog: bool = ..., output: str = ...): ...
def bessel(N: Any, Wn: Any, btype: str = ..., analog: bool = ..., output: str = ..., norm: str = ...): ...
def band_stop_obj(wp: Any, ind: Any, passb: Any, stopb: Any, gpass: Any, gstop: Any, type: Any): ...
def buttord(wp: Any, ws: Any, gpass: Any, gstop: Any, analog: bool = ...): ...
def cheb1ord(wp: Any, ws: Any, gpass: Any, gstop: Any, analog: bool = ...): ...
def cheb2ord(wp: Any, ws: Any, gpass: Any, gstop: Any, analog: bool = ...): ...
def ellipord(wp: Any, ws: Any, gpass: Any, gstop: Any, analog: bool = ...): ...
def buttap(N: Any): ...
def cheb1ap(N: Any, rp: Any): ...
def cheb2ap(N: Any, rs: Any): ...
def ellipap(N: Any, rp: Any, rs: Any): ...
def besselap(N: Any, norm: str = ...): ...
def iirnotch(w0: Any, Q: Any): ...
def iirpeak(w0: Any, Q: Any): ...
