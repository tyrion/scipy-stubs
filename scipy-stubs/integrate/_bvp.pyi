# Stubs for scipy.integrate._bvp (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from scipy.optimize import OptimizeResult
from typing import Any, Optional

EPS: Any

def estimate_fun_jac(fun: Any, x: Any, y: Any, p: Any, f0: Optional[Any] = ...): ...
def estimate_bc_jac(bc: Any, ya: Any, yb: Any, p: Any, bc0: Optional[Any] = ...): ...
def compute_jac_indices(n: Any, m: Any, k: Any): ...
def stacked_matmul(a: Any, b: Any): ...
def construct_global_jac(n: Any, m: Any, k: Any, i_jac: Any, j_jac: Any, h: Any, df_dy: Any, df_dy_middle: Any, df_dp: Any, df_dp_middle: Any, dbc_dya: Any, dbc_dyb: Any, dbc_dp: Any): ...
def collocation_fun(fun: Any, y: Any, p: Any, x: Any, h: Any): ...
def prepare_sys(n: Any, m: Any, k: Any, fun: Any, bc: Any, fun_jac: Any, bc_jac: Any, x: Any, h: Any): ...
def solve_newton(n: Any, m: Any, h: Any, col_fun: Any, bc: Any, jac: Any, y: Any, p: Any, B: Any, bvp_tol: Any): ...
def print_iteration_header() -> None: ...
def print_iteration_progress(iteration: Any, residual: Any, total_nodes: Any, nodes_added: Any) -> None: ...

class BVPResult(OptimizeResult): ...

TERMINATION_MESSAGES: Any

def estimate_rms_residuals(fun: Any, sol: Any, x: Any, h: Any, p: Any, r_middle: Any, f_middle: Any): ...
def create_spline(y: Any, yp: Any, x: Any, h: Any): ...
def modify_mesh(x: Any, insert_1: Any, insert_2: Any): ...
def wrap_functions(fun: Any, bc: Any, fun_jac: Any, bc_jac: Any, k: Any, a: Any, S: Any, D: Any, dtype: Any): ...
def solve_bvp(fun: Any, bc: Any, x: Any, y: Any, p: Optional[Any] = ..., S: Optional[Any] = ..., fun_jac: Optional[Any] = ..., bc_jac: Optional[Any] = ..., tol: float = ..., max_nodes: int = ..., verbose: int = ...): ...
