# Stubs for scipy.integrate._ivp.bdf (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import DenseOutput, OdeSolver
from .common import EPS, norm, num_jac, select_initial_step, validate_max_step, validate_tol, warn_extraneous
from typing import Any, Optional

MAX_ORDER: int
NEWTON_MAXITER: int
MIN_FACTOR: float
MAX_FACTOR: int

def compute_R(order: Any, factor: Any): ...
def change_D(D: Any, order: Any, factor: Any) -> None: ...
def solve_bdf_system(fun: Any, t_new: Any, y_predict: Any, c: Any, psi: Any, LU: Any, solve_lu: Any, scale: Any, tol: Any): ...

class BDF(OdeSolver):
    max_step: Any = ...
    h_abs: Any = ...
    h_abs_old: Any = ...
    error_norm_old: Any = ...
    newton_tol: Any = ...
    jac_factor: Any = ...
    lu: Any = ...
    solve_lu: Any = ...
    I: Any = ...
    gamma: Any = ...
    alpha: Any = ...
    error_const: Any = ...
    D: Any = ...
    order: int = ...
    n_equal_steps: int = ...
    LU: Any = ...
    def __init__(self, fun: Any, t0: Any, y0: Any, t_bound: Any, max_step: Any = ..., rtol: float = ..., atol: float = ..., jac: Optional[Any] = ..., jac_sparsity: Optional[Any] = ..., vectorized: bool = ..., **extraneous: Any) -> None: ...
    def _validate_jac(self, jac: Any, sparsity: Any): ...
    t: Any = ...
    y: Any = ...
    J: Any = ...
    def _step_impl(self): ...
    def _dense_output_impl(self): ...

class BdfDenseOutput(DenseOutput):
    order: Any = ...
    t_shift: Any = ...
    denom: Any = ...
    D: Any = ...
    def __init__(self, t_old: Any, t: Any, h: Any, order: Any, D: Any) -> None: ...
    def _call_impl(self, t: Any): ...
