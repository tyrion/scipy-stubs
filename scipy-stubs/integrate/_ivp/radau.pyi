# Stubs for scipy.integrate._ivp.radau (Python 3.6)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .base import DenseOutput, OdeSolver
from .common import EPS, norm, num_jac, select_initial_step, validate_max_step, validate_tol, warn_extraneous
from typing import Any, Optional

S6: Any
C: Any
E: Any
MU_REAL: Any
MU_COMPLEX: Any
T: Any
TI: Any
TI_REAL: Any
TI_COMPLEX: Any
P: Any
NEWTON_MAXITER: int
MIN_FACTOR: float
MAX_FACTOR: int

def solve_collocation_system(fun: Any, t: Any, y: Any, h: Any, Z0: Any, scale: Any, tol: Any, LU_real: Any, LU_complex: Any, solve_lu: Any): ...
def predict_factor(h_abs: Any, h_abs_old: Any, error_norm: Any, error_norm_old: Any): ...

class Radau(OdeSolver):
    y_old: Any = ...
    max_step: Any = ...
    f: Any = ...
    h_abs: Any = ...
    h_abs_old: Any = ...
    error_norm_old: Any = ...
    newton_tol: Any = ...
    sol: Any = ...
    jac_factor: Any = ...
    lu: Any = ...
    solve_lu: Any = ...
    I: Any = ...
    current_jac: bool = ...
    LU_real: Any = ...
    LU_complex: Any = ...
    Z: Any = ...
    def __init__(self, fun: Any, t0: Any, y0: Any, t_bound: Any, max_step: Any = ..., rtol: float = ..., atol: float = ..., jac: Optional[Any] = ..., jac_sparsity: Optional[Any] = ..., vectorized: bool = ..., **extraneous: Any) -> None: ...
    njev: int = ...
    def _validate_jac(self, jac: Any, sparsity: Any): ...
    t: Any = ...
    y: Any = ...
    J: Any = ...
    t_old: Any = ...
    def _step_impl(self): ...
    def _compute_dense_output(self): ...
    def _dense_output_impl(self): ...

class RadauDenseOutput(DenseOutput):
    h: Any = ...
    Q: Any = ...
    order: Any = ...
    y_old: Any = ...
    def __init__(self, t_old: Any, t: Any, y_old: Any, Q: Any) -> None: ...
    def _call_impl(self, t: Any): ...
